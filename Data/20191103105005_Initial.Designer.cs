// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnet_ef_demo.Data;

namespace dotnet_ef_demo.Data
{
    [DbContext(typeof(NorthwindContext))]
    [Migration("20191103105005_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("dotnet_ef_demo.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("categoryId")
                        .HasColumnType("int(11)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("categoryName")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<byte[]>("Picture")
                        .HasColumnName("picture")
                        .HasColumnType("blob");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.CustCustDemographics", b =>
                {
                    b.Property<string>("CustId")
                        .HasColumnName("custId")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CustomerTypeId")
                        .HasColumnName("customerTypeId")
                        .HasColumnType("varchar(10)");

                    b.HasKey("CustId", "CustomerTypeId")
                        .HasName("PRIMARY");

                    b.HasIndex("CustomerTypeId")
                        .HasName("customerTypeId");

                    b.ToTable("CustCustDemographics");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.Customer", b =>
                {
                    b.Property<string>("CustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("custId")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("companyName")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ContactName")
                        .HasColumnName("contactName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ContactTitle")
                        .HasColumnName("contactTitle")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(225)");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("varchar(24)");

                    b.Property<string>("PostalCode")
                        .HasColumnName("postalCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Region")
                        .HasColumnName("region")
                        .HasColumnType("varchar(15)");

                    b.HasKey("CustId")
                        .HasName("PRIMARY");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.CustomerDemographics", b =>
                {
                    b.Property<string>("CustomerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customerTypeId")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CustomerDesc")
                        .HasColumnName("customerDesc")
                        .HasColumnType("text");

                    b.HasKey("CustomerTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("CustomerDemographics");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employeeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnName("birthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(225)");

                    b.Property<string>("Extension")
                        .HasColumnName("extension")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnName("hireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("MgrId")
                        .HasColumnName("mgrId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasColumnType("varchar(24)");

                    b.Property<byte[]>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("blob");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("varchar(24)");

                    b.Property<byte[]>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("blob");

                    b.Property<string>("PhotoPath")
                        .HasColumnName("photoPath")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PostalCode")
                        .HasColumnName("postalCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Region")
                        .HasColumnName("region")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TitleOfCourtesy")
                        .HasColumnName("titleOfCourtesy")
                        .HasColumnType("varchar(25)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.EmployeeTerritory", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnName("employeeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("TerritoryId")
                        .HasColumnName("territoryId")
                        .HasColumnType("varchar(20)");

                    b.HasKey("EmployeeId", "TerritoryId")
                        .HasName("PRIMARY");

                    b.HasIndex("TerritoryId")
                        .HasName("territoryId");

                    b.ToTable("EmployeeTerritory");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("orderDetailId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("OrderId")
                        .HasColumnName("orderId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnName("productId")
                        .HasColumnType("int(11)");

                    b.Property<short>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("smallint(6)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnName("unitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId")
                        .HasName("orderId");

                    b.HasIndex("ProductId")
                        .HasName("productId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("productId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("categoryId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Discontinued")
                        .IsRequired()
                        .HasColumnName("discontinued")
                        .HasColumnType("char(1)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("productName")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnName("quantityPerUnit")
                        .HasColumnType("varchar(20)");

                    b.Property<short?>("ReorderLevel")
                        .HasColumnName("reorderLevel")
                        .HasColumnType("smallint(6)");

                    b.Property<int?>("SupplierId")
                        .HasColumnName("supplierId")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnName("unitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<short?>("UnitsInStock")
                        .HasColumnName("unitsInStock")
                        .HasColumnType("smallint(6)");

                    b.Property<short?>("UnitsOnOrder")
                        .HasColumnName("unitsOnOrder")
                        .HasColumnType("smallint(6)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId")
                        .HasName("categoryId");

                    b.HasIndex("SupplierId")
                        .HasName("supplierId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("regionId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Regiondescription")
                        .IsRequired()
                        .HasColumnName("regiondescription")
                        .HasColumnType("varchar(50)");

                    b.HasKey("RegionId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.SalesOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("orderId")
                        .HasColumnType("int(11)");

                    b.Property<string>("CustId")
                        .HasColumnName("custId")
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnName("employeeId")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("Freight")
                        .HasColumnName("freight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnName("orderDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnName("requiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShipAddress")
                        .HasColumnName("shipAddress")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("ShipCity")
                        .HasColumnName("shipCity")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ShipCountry")
                        .HasColumnName("shipCountry")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ShipName")
                        .HasColumnName("shipName")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ShipPostalCode")
                        .HasColumnName("shipPostalCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ShipRegion")
                        .HasColumnName("shipRegion")
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnName("shippedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Shipperid")
                        .HasColumnName("shipperid")
                        .HasColumnType("int(11)");

                    b.HasKey("OrderId", "CustId")
                        .HasName("PRIMARY");

                    b.HasIndex("CustId")
                        .HasName("custId");

                    b.HasIndex("Shipperid")
                        .HasName("shipperid");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.Shipper", b =>
                {
                    b.Property<int>("ShipperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("shipperId")
                        .HasColumnType("int(11)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("companyName")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("varchar(44)");

                    b.HasKey("ShipperId");

                    b.ToTable("Shipper");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("supplierId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("companyName")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ContactName")
                        .HasColumnName("contactName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ContactTitle")
                        .HasColumnName("contactTitle")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(225)");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("varchar(24)");

                    b.Property<string>("HomePage")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("varchar(24)");

                    b.Property<string>("PostalCode")
                        .HasColumnName("postalCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Region")
                        .HasColumnName("region")
                        .HasColumnType("varchar(15)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.Territory", b =>
                {
                    b.Property<string>("TerritoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("territoryId")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RegionId")
                        .HasColumnName("regionId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Territorydescription")
                        .IsRequired()
                        .HasColumnName("territorydescription")
                        .HasColumnType("varchar(50)");

                    b.HasKey("TerritoryId");

                    b.HasIndex("RegionId")
                        .HasName("regionId");

                    b.ToTable("Territory");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.CustCustDemographics", b =>
                {
                    b.HasOne("dotnet_ef_demo.Data.Customer", "Cust")
                        .WithMany("CustCustDemographics")
                        .HasForeignKey("CustId")
                        .HasConstraintName("CustCustDemographics_ibfk_1");

                    b.HasOne("dotnet_ef_demo.Data.CustomerDemographics", "CustomerType")
                        .WithMany("CustCustDemographics")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("CustCustDemographics_ibfk_2");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.EmployeeTerritory", b =>
                {
                    b.HasOne("dotnet_ef_demo.Data.Employee", "Employee")
                        .WithMany("EmployeeTerritory")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("EmployeeTerritory_ibfk_1");

                    b.HasOne("dotnet_ef_demo.Data.Territory", "Territory")
                        .WithMany("EmployeeTerritory")
                        .HasForeignKey("TerritoryId")
                        .HasConstraintName("EmployeeTerritory_ibfk_2");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.OrderDetail", b =>
                {
                    b.HasOne("dotnet_ef_demo.Data.Product", "Product")
                        .WithMany("OrderDetail")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("OrderDetail_ibfk_2");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.Product", b =>
                {
                    b.HasOne("dotnet_ef_demo.Data.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Product_ibfk_2");

                    b.HasOne("dotnet_ef_demo.Data.Supplier", "Supplier")
                        .WithMany("Product")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("Product_ibfk_1");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.SalesOrder", b =>
                {
                    b.HasOne("dotnet_ef_demo.Data.Customer", "Cust")
                        .WithMany("SalesOrder")
                        .HasForeignKey("CustId")
                        .HasConstraintName("SalesOrder_ibfk_2");

                    b.HasOne("dotnet_ef_demo.Data.Shipper", "Shipper")
                        .WithMany("SalesOrder")
                        .HasForeignKey("Shipperid")
                        .HasConstraintName("SalesOrder_ibfk_1");
                });

            modelBuilder.Entity("dotnet_ef_demo.Data.Territory", b =>
                {
                    b.HasOne("dotnet_ef_demo.Data.Region", "Region")
                        .WithMany("Territory")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("Territory_ibfk_1");
                });
#pragma warning restore 612, 618
        }
    }
}
